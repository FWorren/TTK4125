#include "orderHandler.h"
#include "elevator.h"
#include "elev.h"
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

order_t elevator_init() {
	int current_floor = elev_get_floor_sensor_signal();
	if (current_floor != -1){
		elev_set_floor_indicator(current_floor);
		order_t current_pos;
		current_pos.floor = current_floor;
		current_pos.dir = -1;
		return current_pos;
	}
	elev_set_motor_direction(DIRN_DOWN);
	while (current_floor == -1){
		current_floor = elev_get_floor_sensor_signal();
	}
	elev_set_floor_indicator(current_floor);
	elev_set_motor_direction(DIRN_STOP);
	order_t current_pos;
	current_pos.floor = current_floor;
	current_pos.dir = -1;
	return current_pos;
}

event_t elevator_wait(int **orderlist, state_t *state, order_t *head_order, order_t *prev_order) {
	if (*state != WAIT)
		*state = WAIT;	
	if (orderHandler_get_number_of_orders(orderlist) > 0){
		*head_order = orderHandler_set_head_order(orderlist, prev_order);
		if ((*head_order).floor == (*prev_order).floor){
			return FLOOR_REACHED;
		}
		return NEW_ORDER;
	}
	return NO_ORDERS;
}

event_t elevator_run(int **orderlist, state_t *state, order_t *head_order, order_t *prev_order) {
	if (*state != RUN){
		*state = RUN;
		elev_set_motor_direction((*head_order).dir);	
	}
	int current_floor = elev_get_floor_sensor_signal();
	if (current_floor != -1){
		elev_set_floor_indicator(current_floor);
		if (orderHandler_check_current_floor(orderlist, current_floor, (*head_order).dir)){
			(*head_order).floor = current_floor;
			elev_set_motor_direction(DIRN_STOP);
			return FLOOR_REACHED;
		}
	}
	if (current_floor == (*head_order).floor){
		elev_set_motor_direction(DIRN_STOP);
		return FLOOR_REACHED;
	}
	if (elev_get_stop_signal()){
		elev_set_motor_direction(DIRN_STOP);
		return STOP;
	}
	if (elev_get_obstruction_signal()){
		elev_set_motor_direction(DIRN_STOP);
		return OBSTR;
	}
	return NEW_ORDER;
}

event_t elevator_door(int **orderlist, state_t *state, order_t *head_order, clock_t *start) {
	if (elev_get_floor_sensor_signal() != -1) {
		if (*state != DOOR){
			*state = DOOR;
			*start = clock();
			elevator_clear_lights_current_floor((*head_order).floor);
			elev_set_door_open_lamp(1);
			orderHandler_delete_order(orderlist, head_order);
		}
		if (elev_get_obstruction_signal()){*start = clock();}
		if(elev_get_stop_signal()){return STOP;}
		if ((float)((clock() - *start)/(CLOCKS_PER_SEC)) >= 3.0){
			elev_set_door_open_lamp(0);
			return NO_ORDERS;
		}else{
			return FLOOR_REACHED;
		}
	} else
		return FLOOR_MISSED;
}

event_t elevator_stop_obstruction(state_t *state){
	if (*state != STOP_OBS)
		*state = STOP_OBS;
	if (!elev_get_obstruction_signal())
		return NEW_ORDER;
	return OBSTR;
}

event_t elevator_stop(int **orderlist, state_t *state, order_t *head_order) {
	if (*state != STOPPED){
		printf("The elevator has stopped! Press ctr + c to exit program or request a new order from command");
		*state = STOPPED;
		elevator_clear_all_lights();
		orderHandler_delete_all_orders(orderlist);
		elev_set_stop_lamp(1);
		if(elev_get_floor_sensor_signal() != -1)
		elev_set_door_open_lamp(1);
	}
	if (orderHandler_get_number_of_orders(orderlist) > 0){
		*head_order = orderHandler_set_head_order(orderlist, head_order);
		elev_set_stop_lamp(0);
		return NEW_ORDER;
	}
	return STOP;
}

event_t elevator_undef(order_t head_order, state_t *state) {
	if (*state != UNDEF) {
		*state = UNDEF;
		elev_set_motor_direction(DIRN_DOWN);
	}
	int current_floor = elev_get_floor_sensor_signal();
	if (current_floor != -1) {
		elev_set_motor_direction(DIRN_STOP);
		if (current_floor == (*head_order).floor){
			return FLOOR_REACHED;
		} else
			elev_set_motor_direction(DIRN_UP);
			return FLOOR_MISSED;
	}
	return FLOOR_MISSED;
}

void elevator_clear_lights_current_floor(int current_floor) {
	elev_set_button_lamp(BUTTON_COMMAND, current_floor, 0);
	if(current_floor < N_FLOORS - 1)
		elev_set_button_lamp(BUTTON_CALL_UP, current_floor, 0);
	if(current_floor > 0)
		elev_set_button_lamp(BUTTON_CALL_DOWN, current_floor, 0);
}

void elevator_clear_all_lights( void ) {
	elev_set_door_open_lamp(0);
	elev_set_stop_lamp(0);
	int i;	
	for(i = 0; i < N_FLOORS; i++){
		elev_set_button_lamp(BUTTON_COMMAND, i, 0);
		if(i > 0)
			elev_set_button_lamp(BUTTON_CALL_DOWN, i, 0);
		if(i < N_FLOORS - 1)
			elev_set_button_lamp(BUTTON_CALL_UP, i, 0);
	}
}
